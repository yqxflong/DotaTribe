class CCSkeleton: public CCNodeRGBA, public CCBlendProtocol
{
	Skeleton* skeleton;
	Bone* rootBone;
	float timeScale;
	bool debugSlots;
	bool debugBones;
	bool premultipliedAlpha;
	std::string m_ObjectUUID;		//骨骼注册的UUID(唯一标示Json&Atlas)
	Animation * pCurAnimation;		//当前动画(内部使用 请不要库外调用)
	int			m_AnimationID;		//骨骼动作配置ID
	long		skeletonLoopCount;	//当前动画回调重复次数
	 
	std::vector<BoneEfectData>     boneEffectDataVec;   //骨骼绑点数据
	  
	static CCSkeleton* createWithData (SkeletonData* skeletonData, bool ownsSkeletonData = false);
	static CCSkeleton* createWithFile (const char* skeletonDataFile, Atlas* atlas, float scale = 1);
	static CCSkeleton* createWithFile (const char* skeletonDataFile, const char* atlasFile, float scale = 1);

	virtual void update (float deltaTime);
	virtual void draw ();
	virtual cocos2d::CCRect boundingBox ();

	// --- Convenience methods for common Skeleton_* functions.
	void updateWorldTransform ();

	void setToSetupPose ();
	void setBonesToSetupPose ();
	void setSlotsToSetupPose ();

	//注册骨骼回调协议代理
	virtual void registerCallBackDelegate(SkeletonCallBackProtocol * pSkeletonCallBackDelegate);
	virtual void registerScriptEventDelegate(LUA_FUNCTION scripeEventHandler);
	virtual void removeAllCallBackNode();
	virtual void resetAllCallBackNode();
	std::vector<PSkeletonCallBack_Node> *  getCallBackEventVec();
	SkeletonCallBackProtocol *	 getCallBackEventDelegate();
	void    postSkeletonActionFinish();
	void    resetSkeletonActionFinish();

	void  removeAllBoneEffect();				        //移除所有骨骼绑定特效
	void  removeAllLoopEffect();						//删除所有循环骨骼绑定特效
	void  removeAllUnLoopEffect();						//删除所有非循环骨骼绑定特效
	void  removeBoneEffectByName(std::string boneName); //删除指定的骨骼绑定特效
	void  removeBoneEffectByID(int boneEffectID);		//删除指定ID的骨骼特效
	void  removeBoneEffect(int boneEffectID,std::string boneName);  //删除指定的ID和绑定的骨骼的特效
	void  addBoneEffectWithData(PSkeletonCallBack_Node pSkeletonCallData,Bone * pBindBone); //根据骨骼回调数据加载骨骼绑点特效
	void  addBoneEffectWithData(BoneEfectData & boneEffectData);
	void  updateBoneEffect();
	 
  
	/* Returns 0 if the bone was not found. */
	Bone* findBone (const char* boneName) const;
	/* Returns 0 if the slot was not found. */
	Slot* findSlot (const char* slotName) const;
	
	/* Sets the skin used to look up attachments not found in the SkeletonData defaultSkin. Attachments from the new skin are
	 * attached if the corresponding attachment from the old skin was attached. Returns false if the skin was not found.
	 * @param skin May be 0.*/
	bool setSkin (const char* skinName);
	
	/* Returns 0 if the slot or attachment was not found. */
	Attachment* getAttachment (const char* slotName, const char* attachmentName) const;
	/* Returns false if the slot or attachment was not found. */
	bool setAttachment (const char* slotName, const char* attachmentName);

	// --- CCBlendProtocol
	virtual void setOpacityModifyRGB (bool value);
	virtual bool isOpacityModifyRGB ();

};