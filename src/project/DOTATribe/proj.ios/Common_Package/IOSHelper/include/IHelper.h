#ifndef  _IOSHELPER_IHELPER_H_
#define  _IOSHELPER_IHELPER_H_


#include <string>
#include <UIKit/UIImage.h>

namespace  ioshelper
{


/************************************************************************/
/* IHelper类，当前版本1.0.1                                             */
/*                                                                      */
/* 主要将IOS平台常用的各种接口进行封装，确保开发者无需在关注            */
/* IOS各种系统的调用及Obj-C语言，所有接口全部以c/c++的接口暴漏给开发者  */
/* 部分系统的事件，需外层开发者传入对应的监听器（外层使用者自行创建）   */
/************************************************************************/
class IHelper
{
public:
	IHelper();
	virtual ~IHelper();

public:
	/************************************************************************/
	/* 获取当前手机的联网类型                                               */
	/************************************************************************/
	enum
	{
		_SYS_NETWORK_UNKOWN_, // 未知的网络类型
		_SYS_NETWORK_WIFI_,   // WIFI
		_SYS_NETWORK_2G_,     // 2G
		_SYS_NETWORK_3G_,     // 3G
		_SYS_NETWORK_4G_,     // 4G
	};
	virtual  int  GetNetWorkType()  =  0;

public:
	/************************************************************************/
	/* 获取当前手机网络运营商                                               */
	/************************************************************************/
	enum
	{
		_SYS_ISP_UNKOWN_,      // 未知的网络运营商
		_SYS_ISP_TELCOM_,      // 电信
		_SYS_ISP_UNICOM_,      // 联通
		_SYS_ISP_CHINAMOBILE_, // 中国移动
		_SYS_ISP_TIETONG_,     // 铁通
	};
	virtual  int  GetISPType()       =  0;

public:
	/************************************************************************/
	/* 得到设备MAC地址                                                      */
	/************************************************************************/
	virtual  std::string  GetDeviceMacAddr()  =  0;
	/************************************************************************/
	/* 得到设备UUID(IOS6.0及以上有用，且每次软件删除之后会变化)             */
	/* 无法确保唯一【谨慎使用】                                             */
	/************************************************************************/
	virtual  std::string  GetDeviceUUID()     =  0;
	/************************************************************************/
	/* 得到设备IMEI(IOS下仅仅返回空，苹果不允许获取)                        */
	/************************************************************************/
	virtual  std::string  GetDeviceIMEI()     =  0;
	/************************************************************************/
	/* 得到设备类型标示字符串("iPhone1,1" "iPhone4,1" "iPhone5,3"等)        */
	/************************************************************************/
	virtual  std::string  GetDeviceType()     =  0;
	/************************************************************************/
	/* 得到设备系统版本号                                                   */
	/************************************************************************/
	virtual  std::string  GetSystemVersion()  =  0;
	/************************************************************************/
	/* 得到设备名称                                                         */
	/************************************************************************/
	virtual  std::string  GetDeviceName()     =  0;
	/************************************************************************/
	/* 得到系统当前语言                                                     */
	/************************************************************************/
	virtual  std::string  GetSystemLanguage() =  0;
	/************************************************************************/
	/* 得到系统当前国家                                                     */
	/************************************************************************/
	virtual  std::string  GetSystemCountry()  =  0;
	/************************************************************************/
	/* 得到设备当前剩余空间(MB)                                             */
	/************************************************************************/
	virtual  long  long   GetUnUsedDiskSpace()=  0;

public:
	/************************************************************************/
	/* 打开指定网页                                                         */
	/************************************************************************/
	virtual  void  OpenURL(std::string url)  =  0;

public:
	/************************************************************************/
	/* 系统截屏                                                             */
	/************************************************************************/
	virtual  UIImage*  ShotScreen(float width, float height)  =  0;

public:
	/************************************************************************/
	/* 苹果正版IOS App Store支付相关处理                                    */
	/************************************************************************/
	class IIAPListener
	{
	public:
		IIAPListener() {}
		virtual ~IIAPListener() {}

	public:
		/************************************************************************/
		/* 验证商品Id失败事件回调处理                                           */
		/************************************************************************/
		virtual  void  OnValidProductFailedHandler(std::string productId)   =   0;
		/************************************************************************/
		/* 支付失败事件回调处理                                                 */
		/************************************************************************/
		virtual  void  OnPurchaseFailedHandler(std::string productId)       =   0;
		/************************************************************************/
		/* 支付成功事件回调处理                                                 */
		/************************************************************************/
		virtual  void  OnPurchaseSucceedHandler(std::string productId, std::string payUUID, std::string payReceipt)  =  0;
		/************************************************************************/
		/* 找回已购买的Non-Consume商品事件回调处理                              */
		/************************************************************************/
		virtual  void  OnRestoreSucceedHandler(std::string productId)       =   0;
	};
	/************************************************************************/
	/* 设置支付监听器                                                       */
	/************************************************************************/
	virtual  void  SetPayListener(IIAPListener* pListener)  =  0;
	/************************************************************************/
	/* 初始化支付环境                                                       */
	/************************************************************************/
	virtual  void  InitPayEnv()     =  0;
	/************************************************************************/
	/* 销毁支付环境                                                         */
	/************************************************************************/
	virtual  void  DestroyPayEnv()  =  0;
	/************************************************************************/
	/* 找回已购买的Non-Consume商品                                          */
	/************************************************************************/
	virtual  void  RestorePayment() =  0;
	/************************************************************************/
	/* 开始购买                                                             */
	/************************************************************************/
	virtual  void  StartPay(std::string productId)     =   0;
	/************************************************************************/
	/* 是否本地队列中存在指定订单                                           */
	/************************************************************************/
	virtual  bool  IsHasPayment(std::string payUUID)   =   0;
	/************************************************************************/
	/* 从本地订单队列中删除指定订单                                         */
	/************************************************************************/
	virtual  void  DeletePayment(std::string payUUID)  =   0;

public:
	/************************************************************************/
	/* 系统网络连接/断开事件注册                                            */
	/************************************************************************/
	class INetworkListener
	{
	public:
		INetworkListener()  {}
		virtual ~INetworkListener()  {}

	public:
		/************************************************************************/
		/* 系统网路切换事件处理                                                 */
		/************************************************************************/
		virtual  void  OnNetworkChangedHandler()     =  0;
		/************************************************************************/
		/*系统网络断开事件处理                                                  */
		/************************************************************************/
		virtual  void  OnNetworkDisConnectHandler()  =  0;
	};
	/************************************************************************/
	/* 注册系统网络变换监听                                                 */
	/************************************************************************/
	virtual  void  SetNetworkListener(INetworkListener* pListener)   =   0;

public:
	/************************************************************************/
	/* 播放视频事件注册                                                     */
	/************************************************************************/
	class IMoviePlayerListener
	{
	public:
		IMoviePlayerListener()  {}
		virtual ~IMoviePlayerListener()  {}

	public:
		/************************************************************************/
		/* 视频播放完毕事件处理                                                 */
		/************************************************************************/
		virtual  void  OnMoviePlayerFinishedHandler()  =  0;
	};
	/************************************************************************/
	/* 注册视频播放回调监听处理                                             */
	/************************************************************************/
	virtual  void  SetMoviePlayerListener(IMoviePlayerListener* pListener)  =  0;
	/************************************************************************/
	/* 播放本地视频文件                                                     */
	/************************************************************************/
	virtual  void  PlayMovie(std::string movieFile)  =  0;
	/************************************************************************/
	/* 播放远程URL视频                                                      */
	/************************************************************************/
	virtual  void  PlayMovieByURL(std::string url)   =  0;

public:
	/************************************************************************/
	/* Web窗口事件处理                                                      */
	/************************************************************************/
	struct _WEB_PARAMS_
	{
		int         mType;                         //外层对话框的类型
		float       mDialogXPos;                   //外层对话框壳X坐标
		float       mDialogYPos;                   //外层对话框壳Y坐标
		int         mDialogBackColorR;             //外层对话框背景颜色
		int         mDialogBackColorG;             //外层对话框背景颜色
		int         mDialogBackColorB;             //外层对话框背景颜色
		int         mDialogBackColorA;             //外层对话框背景颜色
		std::string mDialogImageName;              //外层对话框背景图片名称
		float       mWebViewXPos;                  //WebView的X坐标
		float       mWebViewYPos;                  //WebView的Y坐标
		float       mWebViewWidth;                 //WebView的宽度
		float       mWebViewHeight;                //WebView的高度
		std::string mWebViewURL;                   //WebView的URl地址信息
		float       mCloseButtonXPos;              //关闭按钮X坐标
		float       mCloseButtonYPos;              //关闭按钮Y坐标
		std::string mCloseButtonNormalImageName;   //关闭按钮正常时显示图片名称
		std::string mCloseButtonSelectedImageName; //关闭按钮按下时显示图片名称
		_WEB_PARAMS_()
		{
			mType             = 0;
			mDialogXPos       = 0.0f;
			mDialogYPos       = 0.0f;
			mDialogBackColorR = 125;
			mDialogBackColorG = 125;
			mDialogBackColorB = 125;
			mDialogBackColorA = 125;
			mWebViewXPos      = 0.0f;
			mWebViewYPos      = 0.0f;
			mWebViewWidth     = 0.0f;
			mWebViewHeight    = 0.0f;
			mCloseButtonXPos  = 0.0f;
			mCloseButtonYPos  = 0.0f;
		}
	};
	class IWebListener
	{
	public:
		IWebListener() {}
		virtual ~IWebListener() {}

	public:
		/************************************************************************/
		/* Web窗口关闭事件处理                                                  */
		/************************************************************************/
		virtual  void  OnWebCloseHandler(int type)  =  0;
	};
	/************************************************************************/
	/* 注册Web窗口回调事件监听                                              */
	/************************************************************************/
	virtual  void  SetWebListener(IWebListener* pListener)  =  0;
	/************************************************************************/
	/* 打开指定的WebWindow                                                  */
	/************************************************************************/
	virtual  void  OpenWebWindow(_WEB_PARAMS_ params)       =  0;   

public:
	/************************************************************************/
	/* 开启远程推送操作                                                     */
	/************************************************************************/
	virtual  void  EnableServerNotification()   =   0;
	/************************************************************************/
	/* 注册本地每日定时的推送通知                                           */
	/************************************************************************/
	virtual  void  RegisterLocalDailyNotification(int hours, int minutes, int seconds, std::string text)  =  0;
	/************************************************************************/
	/* 注册本地间隔指定时间后的推送通知                                     */
	/************************************************************************/
	virtual  void  RegisterLocalIntervalNotification(int days, int hours, int minites, int seconds, std::string text)  =  0;
	/************************************************************************/
	/* 清空本地所有推送通知事件                                             */
	/************************************************************************/
	virtual  void  ClearAllLocalNotification()  =   0;
};


/************************************************************************/
/* 获得IOS系统帮助类                                                    */
/************************************************************************/
extern  IHelper*  GetIOSHelper();


}


#endif
